plugins {
    id 'java'
}

group 'com.mku.salmon'
version '3.0.1'

import org.gradle.internal.os.OperatingSystem
OperatingSystem os = OperatingSystem.current();

println "OS: ${os.familyName}"
println "ARCH: ${System.getProperty("os.arch")}"

if (os.isLinux()) {
    project.ext.set('os', 'linux')
} else if (os.isWindows()) {
    project.ext.set('os', 'win')
} else if (os.isMacOsX()) {
    project.ext.set('os', 'macos')
}

if (System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")) {
    project.ext.set('arch', 'x86_64')
} else if (System.getProperty("os.arch").equals("aarch64")) {
    project.ext.set('arch', 'aarch64')
}

repositories {
    maven {
        // uncomment for local repo
        // allowInsecureProtocol true
        // url 'http://localhost/repository/maven/releases'

        // official salmon repo
        url 'https://github.com/mku11/Repo/raw/main/maven/releases'
    }
    mavenCentral()
}

// path to download the native libraries
project.ext.set('nativeLibsDir', "$buildDir/libs/natives")

configurations {
    nativeImplementation
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // salmon libs:
    implementation("com.mku.salmon:salmon-core:${version}")
    implementation("com.mku.salmon:salmon-fs:${version}")
	
	// salmon native libs
    implementation("com.mku.salmon:salmon-native:${version}:${project.os}-${project.arch}")
    nativeImplementation("com.mku.salmon:salmon-native:${version}:${project.os}-${project.arch}")	
}

test {
    useJUnitPlatform()
}

task extractNativeBundle(type: Sync) {
    from {
        configurations.nativeImplementation.collect { zipTree(it) }
    }
    into file(project.nativeLibsDir)
}

classes.dependsOn extractNativeBundle

ext {
    javaMainClass = "com.mku.salmon.samples.main.Main"
}

task run(type: JavaExec) {
    group = "application"
    description = "Run Main"
    classpath = sourceSets.main.runtimeClasspath
    main = javaMainClass
    // this will add the native library path to the library path
	// if you're running the jar file from the command line 
	// make sure you add the path with vm parameter: -Djava.library.path="/path/to/native/lib"
    systemProperty "java.library.path", "build/libs/natives/lib"
}
