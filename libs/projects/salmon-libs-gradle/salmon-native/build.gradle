import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'c'
    id 'cpp'
    id 'maven-publish'
}

group 'com.mku.salmon'
description = 'Salmon AES256 CTR native encryption library'
version '2.2.0'
project.ext.set('arch', 'x86_64')
project.ext.set('os', 'win')

// set to true to enable opencl
// windows
project.ext.set('enable_opencl', false)
project.ext.set('OPENCL_INCLUDE', 'D:\\tools\\OpenCL-SDK-v2024.05.08-Win-x64\\include')
project.ext.set('OPENCL_LIB', 'D:\\tools\\OpenCL-SDK-v2024.05.08-Win-x64\\lib')
// linux
// project.ext.set('OPENCL_INCLUDE', '/usr/include')
// project.ext.set('OPENCL_LIB', '/usr/lib/x86_64-linux-gnu/')

repositories {
    mavenCentral()
}

dependencies {

}

sourceSets {
    // workaround: since we use external source directories the IDE
    // cannot see the c source so we add them here as java files
    main.java.srcDirs += '../../../src/c'
}

model {
    platforms {
        currentPlatform {
            architecture project.arch
        }
    }
    components {
        // needs VS, cygwin GCC, or minGW in windows, or Linux GCC, MacOS Darwin GCC
        // the plugin will find it automatically
        salmon(NativeLibrarySpec) {
            targetPlatform "currentPlatform"
            binaries.all {
                def jvmHome = Jvm.current().javaHome
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${jvmHome}/include"
                    cCompiler.args "-I${jvmHome}/include/win32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/freebsd"
                }
                cCompiler.args '-I' + projectDir + '/../../../src/c/salmon/include'
                cCompiler.args '-I' + projectDir + '/../../../src/c/salmon-jni/include'

                if (project.enable_opencl) {
                    cCompiler.args '-DUSE_OPENCL=1'
					cCompiler.args '-I' + project.OPENCL_INCLUDE
                    if (targetPlatform.operatingSystem.windows) {
                        linker.args '/LIBPATH:' + project.OPENCL_LIB
                        linker.args 'OpenCL.lib'
                    } else if (targetPlatform.operatingSystem.linux) {
                        linker.args '-L' + project.OPENCL_LIB
                        linker.args '-lOpenCL'
                    }
                }

                cCompiler.args '-O2'
                cCompiler.args '-maes'
            }
            sources {
                c {
                    source {
                        srcDirs "../../../src/c"
                        include "**/salmon/src/*.c"
                        include "**/salmon-jni/src/*.c"
                    }
                }
                cpp {
                    source {
                        srcDirs "./"
                        include "salmon-aes-kernel.cpp"
                    }
                }
            }
        }
    }
}

task assembleArtifact(type: Zip, group: 'com.mku.salmon') {
    archiveName 'salmon-native.zip'
    archiveClassifier.set(project.os + '-' + project.arch)
    destinationDir file("$buildDir/libs/")
    from("build/libs/salmon/shared") {
        into 'lib'
    }
    from '../../../../LICENSE'
    from '../../../../NOTICE'

    from("../../../src/c/salmon/include/") {
        into 'salmon/include'
        include '*.h'
    }
    from("../../../src/c/salmon-jni/include/") {
        into 'salmon-jni/include'
        include '*.h'
    }
    description "Assemble archive $archiveName into ${relativePath(destinationDir)}"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: assembleArtifact, extension: 'jar'
            pom {
                name = project.name
                packaging = 'jar'
                description = project.description
                url = 'https://github.com/mku11/Salmon-AES-CTR'

                scm {
                    url = 'https://github.com/mku11/Salmon-AES-CTR'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/mku11/Salmon-AES-CTR/blob/main/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'mku'
                        name = 'Max Kas'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url uri("${projectDir}/../../../../output/maven/releases")
        }
        mavenLocal()
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'salmon.Main'
    }
}